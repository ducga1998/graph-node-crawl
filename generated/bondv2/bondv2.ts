// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AuthorityUpdated extends ethereum.Event {
  get params(): AuthorityUpdated__Params {
    return new AuthorityUpdated__Params(this);
  }
}

export class AuthorityUpdated__Params {
  _event: AuthorityUpdated;

  constructor(event: AuthorityUpdated) {
    this._event = event;
  }

  get authority(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Bond extends ethereum.Event {
  get params(): Bond__Params {
    return new Bond__Params(this);
  }
}

export class Bond__Params {
  _event: Bond;

  constructor(event: Bond) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get price(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get noteId(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get buyer(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get referral(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get commission(): BigInt {
    return this._event.parameters[6].value.toBigInt();
  }
}

export class CloseMarket extends ethereum.Event {
  get params(): CloseMarket__Params {
    return new CloseMarket__Params(this);
  }
}

export class CloseMarket__Params {
  _event: CloseMarket;

  constructor(event: CloseMarket) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }
}

export class CreateMarket extends ethereum.Event {
  get params(): CreateMarket__Params {
    return new CreateMarket__Params(this);
  }
}

export class CreateMarket__Params {
  _event: CreateMarket;

  constructor(event: CreateMarket) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get baseToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get quoteToken(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get initialPrice(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Tuned extends ethereum.Event {
  get params(): Tuned__Params {
    return new Tuned__Params(this);
  }
}

export class Tuned__Params {
  _event: Tuned;

  constructor(event: Tuned) {
    this._event = event;
  }

  get id(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get oldControlVariable(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newControlVariable(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class bondv2__adjustmentsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: boolean;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt, value3: boolean) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromBoolean(this.value3));
    return map;
  }
}

export class bondv2__depositResultUserBond_Struct extends ethereum.Tuple {
  get finalPayout(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }
}

export class bondv2__marketsResult {
  value0: BigInt;
  value1: Address;
  value2: boolean;
  value3: BigInt;
  value4: BigInt;
  value5: BigInt;
  value6: BigInt;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: boolean,
    value3: BigInt,
    value4: BigInt,
    value5: BigInt,
    value6: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromBoolean(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromUnsignedBigInt(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    return map;
  }
}

export class bondv2__metadataResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;
  value5: i32;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt,
    value5: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set(
      "value5",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value5))
    );
    return map;
  }
}

export class bondv2__notesResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: BigInt,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class bondv2__partnerRewardsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class bondv2__pendingForResult {
  value0: BigInt;
  value1: boolean;

  constructor(value0: BigInt, value1: boolean) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromBoolean(this.value1));
    return map;
  }
}

export class bondv2__rewardsResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class bondv2__termsResult {
  value0: boolean;
  value1: BigInt;
  value2: BigInt;
  value3: BigInt;
  value4: BigInt;

  constructor(
    value0: boolean,
    value1: BigInt,
    value2: BigInt,
    value3: BigInt,
    value4: BigInt
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    return map;
  }
}

export class bondv2 extends ethereum.SmartContract {
  static bind(address: Address): bondv2 {
    return new bondv2("bondv2", address);
  }

  adjustments(param0: BigInt): bondv2__adjustmentsResult {
    let result = super.call(
      "adjustments",
      "adjustments(uint256):(uint64,uint48,uint48,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new bondv2__adjustmentsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBoolean()
    );
  }

  try_adjustments(
    param0: BigInt
  ): ethereum.CallResult<bondv2__adjustmentsResult> {
    let result = super.tryCall(
      "adjustments",
      "adjustments(uint256):(uint64,uint48,uint48,bool)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bondv2__adjustmentsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBoolean()
      )
    );
  }

  authority(): Address {
    let result = super.call("authority", "authority():(address)", []);

    return result[0].toAddress();
  }

  try_authority(): ethereum.CallResult<Address> {
    let result = super.tryCall("authority", "authority():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  create(
    _quoteToken: Address,
    _market: Array<BigInt>,
    _booleans: Array<boolean>,
    _terms: Array<BigInt>,
    _intervals: Array<BigInt>
  ): BigInt {
    let result = super.call(
      "create",
      "create(address,uint256[3],bool[2],uint256[2],uint32[2]):(uint256)",
      [
        ethereum.Value.fromAddress(_quoteToken),
        ethereum.Value.fromUnsignedBigIntArray(_market),
        ethereum.Value.fromBooleanArray(_booleans),
        ethereum.Value.fromUnsignedBigIntArray(_terms),
        ethereum.Value.fromUnsignedBigIntArray(_intervals)
      ]
    );

    return result[0].toBigInt();
  }

  try_create(
    _quoteToken: Address,
    _market: Array<BigInt>,
    _booleans: Array<boolean>,
    _terms: Array<BigInt>,
    _intervals: Array<BigInt>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "create",
      "create(address,uint256[3],bool[2],uint256[2],uint32[2]):(uint256)",
      [
        ethereum.Value.fromAddress(_quoteToken),
        ethereum.Value.fromUnsignedBigIntArray(_market),
        ethereum.Value.fromBooleanArray(_booleans),
        ethereum.Value.fromUnsignedBigIntArray(_terms),
        ethereum.Value.fromUnsignedBigIntArray(_intervals)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentControlVariable(_id: BigInt): BigInt {
    let result = super.call(
      "currentControlVariable",
      "currentControlVariable(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );

    return result[0].toBigInt();
  }

  try_currentControlVariable(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentControlVariable",
      "currentControlVariable(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  currentDebt(_id: BigInt): BigInt {
    let result = super.call("currentDebt", "currentDebt(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_currentDebt(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "currentDebt",
      "currentDebt(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  daoReward(): BigInt {
    let result = super.call("daoReward", "daoReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_daoReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("daoReward", "daoReward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtDecay(_id: BigInt): BigInt {
    let result = super.call("debtDecay", "debtDecay(uint256):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_debtDecay(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debtDecay", "debtDecay(uint256):(uint64)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  debtRatio(_id: BigInt): BigInt {
    let result = super.call("debtRatio", "debtRatio(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_debtRatio(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall("debtRatio", "debtRatio(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  deposit(
    _id: BigInt,
    _amount: BigInt,
    _maxPrice: BigInt,
    _user: Address,
    _referral: Address
  ): bondv2__depositResultUserBond_Struct {
    let result = super.call(
      "deposit",
      "deposit(uint256,uint256,uint256,address,address):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_maxPrice),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(_referral)
      ]
    );

    return result[0].toTuple() as bondv2__depositResultUserBond_Struct;
  }

  try_deposit(
    _id: BigInt,
    _amount: BigInt,
    _maxPrice: BigInt,
    _user: Address,
    _referral: Address
  ): ethereum.CallResult<bondv2__depositResultUserBond_Struct> {
    let result = super.tryCall(
      "deposit",
      "deposit(uint256,uint256,uint256,address,address):((uint256,uint256,uint256))",
      [
        ethereum.Value.fromUnsignedBigInt(_id),
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_maxPrice),
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromAddress(_referral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTuple() as bondv2__depositResultUserBond_Struct
    );
  }

  indexesFor(_user: Address): Array<BigInt> {
    let result = super.call("indexesFor", "indexesFor(address):(uint256[])", [
      ethereum.Value.fromAddress(_user)
    ]);

    return result[0].toBigIntArray();
  }

  try_indexesFor(_user: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "indexesFor",
      "indexesFor(address):(uint256[])",
      [ethereum.Value.fromAddress(_user)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  isLive(_id: BigInt): boolean {
    let result = super.call("isLive", "isLive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBoolean();
  }

  try_isLive(_id: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("isLive", "isLive(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liveMarkets(): Array<BigInt> {
    let result = super.call("liveMarkets", "liveMarkets():(uint256[])", []);

    return result[0].toBigIntArray();
  }

  try_liveMarkets(): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall("liveMarkets", "liveMarkets():(uint256[])", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  liveMarketsFor(_token: Address): Array<BigInt> {
    let result = super.call(
      "liveMarketsFor",
      "liveMarketsFor(address):(uint256[])",
      [ethereum.Value.fromAddress(_token)]
    );

    return result[0].toBigIntArray();
  }

  try_liveMarketsFor(_token: Address): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "liveMarketsFor",
      "liveMarketsFor(address):(uint256[])",
      [ethereum.Value.fromAddress(_token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  marketPrice(_id: BigInt): BigInt {
    let result = super.call("marketPrice", "marketPrice(uint256):(uint256)", [
      ethereum.Value.fromUnsignedBigInt(_id)
    ]);

    return result[0].toBigInt();
  }

  try_marketPrice(_id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketPrice",
      "marketPrice(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(_id)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  markets(param0: BigInt): bondv2__marketsResult {
    let result = super.call(
      "markets",
      "markets(uint256):(uint256,address,bool,uint64,uint64,uint64,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new bondv2__marketsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toBoolean(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBigInt(),
      result[6].toBigInt()
    );
  }

  try_markets(param0: BigInt): ethereum.CallResult<bondv2__marketsResult> {
    let result = super.tryCall(
      "markets",
      "markets(uint256):(uint256,address,bool,uint64,uint64,uint64,uint256)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bondv2__marketsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toBoolean(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBigInt(),
        value[6].toBigInt()
      )
    );
  }

  marketsForQuote(param0: Address, param1: BigInt): BigInt {
    let result = super.call(
      "marketsForQuote",
      "marketsForQuote(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toBigInt();
  }

  try_marketsForQuote(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "marketsForQuote",
      "marketsForQuote(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  metadata(param0: BigInt): bondv2__metadataResult {
    let result = super.call(
      "metadata",
      "metadata(uint256):(uint48,uint48,uint48,uint48,uint48,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new bondv2__metadataResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toI32()
    );
  }

  try_metadata(param0: BigInt): ethereum.CallResult<bondv2__metadataResult> {
    let result = super.tryCall(
      "metadata",
      "metadata(uint256):(uint48,uint48,uint48,uint48,uint48,uint8)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bondv2__metadataResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toI32()
      )
    );
  }

  notes(param0: Address, param1: BigInt): bondv2__notesResult {
    let result = super.call(
      "notes",
      "notes(address,uint256):(uint256,uint48,uint48,uint48,uint48)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new bondv2__notesResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_notes(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<bondv2__notesResult> {
    let result = super.tryCall(
      "notes",
      "notes(address,uint256):(uint256,uint48,uint48,uint48,uint48)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bondv2__notesResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }

  partnerRewards(param0: Address): bondv2__partnerRewardsResult {
    let result = super.call(
      "partnerRewards",
      "partnerRewards(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new bondv2__partnerRewardsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_partnerRewards(
    param0: Address
  ): ethereum.CallResult<bondv2__partnerRewardsResult> {
    let result = super.tryCall(
      "partnerRewards",
      "partnerRewards(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bondv2__partnerRewardsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  payoutFor(_amount: BigInt, _id: BigInt): BigInt {
    let result = super.call(
      "payoutFor",
      "payoutFor(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );

    return result[0].toBigInt();
  }

  try_payoutFor(_amount: BigInt, _id: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "payoutFor",
      "payoutFor(uint256,uint256):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(_amount),
        ethereum.Value.fromUnsignedBigInt(_id)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  pendingFor(_user: Address, _index: BigInt): bondv2__pendingForResult {
    let result = super.call(
      "pendingFor",
      "pendingFor(address,uint256):(uint256,bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );

    return new bondv2__pendingForResult(
      result[0].toBigInt(),
      result[1].toBoolean()
    );
  }

  try_pendingFor(
    _user: Address,
    _index: BigInt
  ): ethereum.CallResult<bondv2__pendingForResult> {
    let result = super.tryCall(
      "pendingFor",
      "pendingFor(address,uint256):(uint256,bool)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bondv2__pendingForResult(value[0].toBigInt(), value[1].toBoolean())
    );
  }

  pullNote(_from: Address, _index: BigInt): BigInt {
    let result = super.call("pullNote", "pullNote(address,uint256):(uint256)", [
      ethereum.Value.fromAddress(_from),
      ethereum.Value.fromUnsignedBigInt(_index)
    ]);

    return result[0].toBigInt();
  }

  try_pullNote(_from: Address, _index: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "pullNote",
      "pullNote(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(_from),
        ethereum.Value.fromUnsignedBigInt(_index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeem(
    _user: Address,
    _indexes: Array<BigInt>,
    _sendgHECTA: boolean
  ): BigInt {
    let result = super.call(
      "redeem",
      "redeem(address,uint256[],bool):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigIntArray(_indexes),
        ethereum.Value.fromBoolean(_sendgHECTA)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeem(
    _user: Address,
    _indexes: Array<BigInt>,
    _sendgHECTA: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeem",
      "redeem(address,uint256[],bool):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromUnsignedBigIntArray(_indexes),
        ethereum.Value.fromBoolean(_sendgHECTA)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  redeemAll(_user: Address, _sendgHECTA: boolean): BigInt {
    let result = super.call("redeemAll", "redeemAll(address,bool):(uint256)", [
      ethereum.Value.fromAddress(_user),
      ethereum.Value.fromBoolean(_sendgHECTA)
    ]);

    return result[0].toBigInt();
  }

  try_redeemAll(
    _user: Address,
    _sendgHECTA: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemAll",
      "redeemAll(address,bool):(uint256)",
      [
        ethereum.Value.fromAddress(_user),
        ethereum.Value.fromBoolean(_sendgHECTA)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardCap(): BigInt {
    let result = super.call("rewardCap", "rewardCap():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardCap(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardCap", "rewardCap():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardTime(): BigInt {
    let result = super.call("rewardTime", "rewardTime():(uint256)", []);

    return result[0].toBigInt();
  }

  try_rewardTime(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("rewardTime", "rewardTime():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewards(param0: Address): bondv2__rewardsResult {
    let result = super.call(
      "rewards",
      "rewards(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new bondv2__rewardsResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_rewards(param0: Address): ethereum.CallResult<bondv2__rewardsResult> {
    let result = super.tryCall(
      "rewards",
      "rewards(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bondv2__rewardsResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  terms(param0: BigInt): bondv2__termsResult {
    let result = super.call(
      "terms",
      "terms(uint256):(bool,uint64,uint48,uint48,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return new bondv2__termsResult(
      result[0].toBoolean(),
      result[1].toBigInt(),
      result[2].toBigInt(),
      result[3].toBigInt(),
      result[4].toBigInt()
    );
  }

  try_terms(param0: BigInt): ethereum.CallResult<bondv2__termsResult> {
    let result = super.tryCall(
      "terms",
      "terms(uint256):(bool,uint64,uint48,uint48,uint64)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new bondv2__termsResult(
        value[0].toBoolean(),
        value[1].toBigInt(),
        value[2].toBigInt(),
        value[3].toBigInt(),
        value[4].toBigInt()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _authority(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _hecta(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _ghecta(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _staking(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _treasury(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CloseCall extends ethereum.Call {
  get inputs(): CloseCall__Inputs {
    return new CloseCall__Inputs(this);
  }

  get outputs(): CloseCall__Outputs {
    return new CloseCall__Outputs(this);
  }
}

export class CloseCall__Inputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class CloseCall__Outputs {
  _call: CloseCall;

  constructor(call: CloseCall) {
    this._call = call;
  }
}

export class CreateCall extends ethereum.Call {
  get inputs(): CreateCall__Inputs {
    return new CreateCall__Inputs(this);
  }

  get outputs(): CreateCall__Outputs {
    return new CreateCall__Outputs(this);
  }
}

export class CreateCall__Inputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get _quoteToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _market(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _booleans(): Array<boolean> {
    return this._call.inputValues[2].value.toBooleanArray();
  }

  get _terms(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }

  get _intervals(): Array<BigInt> {
    return this._call.inputValues[4].value.toBigIntArray();
  }
}

export class CreateCall__Outputs {
  _call: CreateCall;

  constructor(call: CreateCall) {
    this._call = call;
  }

  get id_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get _id(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _maxPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _user(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _referral(): Address {
    return this._call.inputValues[4].value.toAddress();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get userBond_(): DepositCallUserBond_Struct {
    return this._call.outputValues[0].value.toTuple() as DepositCallUserBond_Struct;
  }
}

export class DepositCallUserBond_Struct extends ethereum.Tuple {
  get finalPayout(): BigInt {
    return this[0].toBigInt();
  }

  get expiry(): BigInt {
    return this[1].toBigInt();
  }

  get index(): BigInt {
    return this[2].toBigInt();
  }
}

export class GetRewardCall extends ethereum.Call {
  get inputs(): GetRewardCall__Inputs {
    return new GetRewardCall__Inputs(this);
  }

  get outputs(): GetRewardCall__Outputs {
    return new GetRewardCall__Outputs(this);
  }
}

export class GetRewardCall__Inputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class GetRewardCall__Outputs {
  _call: GetRewardCall;

  constructor(call: GetRewardCall) {
    this._call = call;
  }
}

export class PullNoteCall extends ethereum.Call {
  get inputs(): PullNoteCall__Inputs {
    return new PullNoteCall__Inputs(this);
  }

  get outputs(): PullNoteCall__Outputs {
    return new PullNoteCall__Outputs(this);
  }
}

export class PullNoteCall__Inputs {
  _call: PullNoteCall;

  constructor(call: PullNoteCall) {
    this._call = call;
  }

  get _from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PullNoteCall__Outputs {
  _call: PullNoteCall;

  constructor(call: PullNoteCall) {
    this._call = call;
  }

  get newIndex_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class PushNoteCall extends ethereum.Call {
  get inputs(): PushNoteCall__Inputs {
    return new PushNoteCall__Inputs(this);
  }

  get outputs(): PushNoteCall__Outputs {
    return new PushNoteCall__Outputs(this);
  }
}

export class PushNoteCall__Inputs {
  _call: PushNoteCall;

  constructor(call: PushNoteCall) {
    this._call = call;
  }

  get _to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _index(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class PushNoteCall__Outputs {
  _call: PushNoteCall;

  constructor(call: PushNoteCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _indexes(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }

  get _sendgHECTA(): boolean {
    return this._call.inputValues[2].value.toBoolean();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get payout_(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemAllCall extends ethereum.Call {
  get inputs(): RedeemAllCall__Inputs {
    return new RedeemAllCall__Inputs(this);
  }

  get outputs(): RedeemAllCall__Outputs {
    return new RedeemAllCall__Outputs(this);
  }
}

export class RedeemAllCall__Inputs {
  _call: RedeemAllCall;

  constructor(call: RedeemAllCall) {
    this._call = call;
  }

  get _user(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _sendgHECTA(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RedeemAllCall__Outputs {
  _call: RedeemAllCall;

  constructor(call: RedeemAllCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SetAuthorityCall extends ethereum.Call {
  get inputs(): SetAuthorityCall__Inputs {
    return new SetAuthorityCall__Inputs(this);
  }

  get outputs(): SetAuthorityCall__Outputs {
    return new SetAuthorityCall__Outputs(this);
  }
}

export class SetAuthorityCall__Inputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }

  get _newAuthority(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAuthorityCall__Outputs {
  _call: SetAuthorityCall;

  constructor(call: SetAuthorityCall) {
    this._call = call;
  }
}

export class SetDAORewardsCall extends ethereum.Call {
  get inputs(): SetDAORewardsCall__Inputs {
    return new SetDAORewardsCall__Inputs(this);
  }

  get outputs(): SetDAORewardsCall__Outputs {
    return new SetDAORewardsCall__Outputs(this);
  }
}

export class SetDAORewardsCall__Inputs {
  _call: SetDAORewardsCall;

  constructor(call: SetDAORewardsCall) {
    this._call = call;
  }

  get _toDAO(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetDAORewardsCall__Outputs {
  _call: SetDAORewardsCall;

  constructor(call: SetDAORewardsCall) {
    this._call = call;
  }
}

export class SetPartnerTermCall extends ethereum.Call {
  get inputs(): SetPartnerTermCall__Inputs {
    return new SetPartnerTermCall__Inputs(this);
  }

  get outputs(): SetPartnerTermCall__Outputs {
    return new SetPartnerTermCall__Outputs(this);
  }
}

export class SetPartnerTermCall__Inputs {
  _call: SetPartnerTermCall;

  constructor(call: SetPartnerTermCall) {
    this._call = call;
  }

  get _partner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _percent(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetPartnerTermCall__Outputs {
  _call: SetPartnerTermCall;

  constructor(call: SetPartnerTermCall) {
    this._call = call;
  }
}

export class SetReferConfigCall extends ethereum.Call {
  get inputs(): SetReferConfigCall__Inputs {
    return new SetReferConfigCall__Inputs(this);
  }

  get outputs(): SetReferConfigCall__Outputs {
    return new SetReferConfigCall__Outputs(this);
  }
}

export class SetReferConfigCall__Inputs {
  _call: SetReferConfigCall;

  constructor(call: SetReferConfigCall) {
    this._call = call;
  }

  get _referrer(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _ref(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _buyer(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetReferConfigCall__Outputs {
  _call: SetReferConfigCall;

  constructor(call: SetReferConfigCall) {
    this._call = call;
  }
}

export class SetRewardCapCall extends ethereum.Call {
  get inputs(): SetRewardCapCall__Inputs {
    return new SetRewardCapCall__Inputs(this);
  }

  get outputs(): SetRewardCapCall__Outputs {
    return new SetRewardCapCall__Outputs(this);
  }
}

export class SetRewardCapCall__Inputs {
  _call: SetRewardCapCall;

  constructor(call: SetRewardCapCall) {
    this._call = call;
  }

  get _cap(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardCapCall__Outputs {
  _call: SetRewardCapCall;

  constructor(call: SetRewardCapCall) {
    this._call = call;
  }
}

export class SetRewardTimeCall extends ethereum.Call {
  get inputs(): SetRewardTimeCall__Inputs {
    return new SetRewardTimeCall__Inputs(this);
  }

  get outputs(): SetRewardTimeCall__Outputs {
    return new SetRewardTimeCall__Outputs(this);
  }
}

export class SetRewardTimeCall__Inputs {
  _call: SetRewardTimeCall;

  constructor(call: SetRewardTimeCall) {
    this._call = call;
  }

  get _time(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRewardTimeCall__Outputs {
  _call: SetRewardTimeCall;

  constructor(call: SetRewardTimeCall) {
    this._call = call;
  }
}

export class UpdateTreasuryCall extends ethereum.Call {
  get inputs(): UpdateTreasuryCall__Inputs {
    return new UpdateTreasuryCall__Inputs(this);
  }

  get outputs(): UpdateTreasuryCall__Outputs {
    return new UpdateTreasuryCall__Outputs(this);
  }
}

export class UpdateTreasuryCall__Inputs {
  _call: UpdateTreasuryCall;

  constructor(call: UpdateTreasuryCall) {
    this._call = call;
  }
}

export class UpdateTreasuryCall__Outputs {
  _call: UpdateTreasuryCall;

  constructor(call: UpdateTreasuryCall) {
    this._call = call;
  }
}
